#BlueJ class context
comment0.params=provider
comment0.target=Location(java.lang.String)
comment0.text=\n\ Construct\ a\ new\ Location\ with\ a\ named\ provider.\n\n\ <p>By\ default\ time,\ latitude\ and\ longitude\ are\ 0,\ and\ the\ location\n\ has\ no\ bearing,\ altitude,\ speed,\ accuracy\ or\ extras.\n\n\ @param\ provider\ the\ name\ of\ the\ provider\ that\ generated\ this\ location\n
comment1.params=l
comment1.target=Location(Location)
comment1.text=\n\ Construct\ a\ new\ Location\ object\ that\ is\ copied\ from\ an\ existing\ one.\n
comment10.params=dest
comment10.target=float\ bearingTo(Location)
comment10.text=\n\ Returns\ the\ approximate\ initial\ bearing\ in\ degrees\ East\ of\ true\n\ North\ when\ traveling\ along\ the\ shortest\ path\ between\ this\n\ location\ and\ the\ given\ location.\ \ The\ shortest\ path\ is\ defined\n\ using\ the\ WGS84\ ellipsoid.\ \ Locations\ that\ are\ (nearly)\n\ antipodal\ may\ produce\ meaningless\ results.\n\n\ @param\ dest\ the\ destination\ location\n\ @return\ the\ initial\ bearing\ in\ degrees\n
comment11.params=
comment11.target=java.lang.String\ getProvider()
comment11.text=\n\ Returns\ the\ name\ of\ the\ provider\ that\ generated\ this\ fix.\n\n\ @return\ the\ provider,\ or\ null\ if\ it\ has\ not\ been\ set\n
comment12.params=provider
comment12.target=void\ setProvider(java.lang.String)
comment12.text=\n\ Sets\ the\ name\ of\ the\ provider\ that\ generated\ this\ fix.\n
comment13.params=
comment13.target=long\ getTime()
comment13.text=\n\ Return\ the\ UTC\ time\ of\ this\ fix,\ in\ milliseconds\ since\ January\ 1,\ 1970.\n\n\ <p>Note\ that\ the\ UTC\ time\ on\ a\ device\ is\ not\ monotonic\:\ it\n\ can\ jump\ forwards\ or\ backwards\ unpredictably.\ So\ always\ use\n\ {@link\ \#getElapsedRealtimeNanos}\ when\ calculating\ time\ deltas.\n\n\ <p>On\ the\ other\ hand,\ {@link\ \#getTime}\ is\ useful\ for\ presenting\n\ a\ human\ readable\ time\ to\ the\ user,\ or\ for\ carefully\ comparing\n\ location\ fixes\ across\ reboot\ or\ across\ devices.\n\n\ <p>All\ locations\ generated\ by\ the\ {@link\ LocationManager}\n\ are\ guaranteed\ to\ have\ a\ valid\ UTC\ time,\ however\ remember\ that\n\ the\ system\ time\ may\ have\ changed\ since\ the\ location\ was\ generated.\n\n\ @return\ time\ of\ fix,\ in\ milliseconds\ since\ January\ 1,\ 1970.\n
comment14.params=time
comment14.target=void\ setTime(long)
comment14.text=\n\ Set\ the\ UTC\ time\ of\ this\ fix,\ in\ milliseconds\ since\ January\ 1,\n\ 1970.\n\n\ @param\ time\ UTC\ time\ of\ this\ fix,\ in\ milliseconds\ since\ January\ 1,\ 1970\n
comment15.params=
comment15.target=long\ getElapsedRealtimeNanos()
comment15.text=\n\ Return\ the\ time\ of\ this\ fix,\ in\ elapsed\ real-time\ since\ system\ boot.\n\n\ <p>This\ value\ can\ be\ reliably\ compared\ to\n\ {@link\ android.os.SystemClock\#elapsedRealtimeNanos},\n\ to\ calculate\ the\ age\ of\ a\ fix\ and\ to\ compare\ Location\ fixes.\ This\n\ is\ reliable\ because\ elapsed\ real-time\ is\ guaranteed\ monotonic\ for\n\ each\ system\ boot\ and\ continues\ to\ increment\ even\ when\ the\ system\n\ is\ in\ deep\ sleep\ (unlike\ {@link\ \#getTime}.\n\n\ <p>All\ locations\ generated\ by\ the\ {@link\ LocationManager}\n\ are\ guaranteed\ to\ have\ a\ valid\ elapsed\ real-time.\n\n\ @return\ elapsed\ real-time\ of\ fix,\ in\ nanoseconds\ since\ system\ boot.\n
comment16.params=time
comment16.target=void\ setElapsedRealtimeNanos(long)
comment16.text=\n\ Set\ the\ time\ of\ this\ fix,\ in\ elapsed\ real-time\ since\ system\ boot.\n\n\ @param\ time\ elapsed\ real-time\ of\ fix,\ in\ nanoseconds\ since\ system\ boot.\n
comment17.params=
comment17.target=double\ getLatitude()
comment17.text=\n\ Get\ the\ latitude,\ in\ degrees.\n\n\ <p>All\ locations\ generated\ by\ the\ {@link\ LocationManager}\n\ will\ have\ a\ valid\ latitude.\n
comment18.params=latitude
comment18.target=void\ setLatitude(double)
comment18.text=\n\ Set\ the\ latitude,\ in\ degrees.\n
comment19.params=
comment19.target=double\ getLongitude()
comment19.text=\n\ Get\ the\ longitude,\ in\ degrees.\n\n\ <p>All\ locations\ generated\ by\ the\ {@link\ LocationManager}\n\ will\ have\ a\ valid\ longitude.\n
comment2.params=latitude\ longitude
comment2.target=Location(double,\ double)
comment20.params=longitude
comment20.target=void\ setLongitude(double)
comment20.text=\n\ Set\ the\ longitude,\ in\ degrees.\n
comment21.params=
comment21.target=boolean\ hasAltitude()
comment21.text=\n\ True\ if\ this\ location\ has\ an\ altitude.\n
comment22.params=
comment22.target=double\ getAltitude()
comment22.text=\n\ Get\ the\ altitude\ if\ available,\ in\ meters\ above\ the\ WGS\ 84\ reference\n\ ellipsoid.\n\n\ <p>If\ this\ location\ does\ not\ have\ an\ altitude\ then\ 0.0\ is\ returned.\n
comment23.params=altitude
comment23.target=void\ setAltitude(double)
comment23.text=\n\ Set\ the\ altitude,\ in\ meters\ above\ the\ WGS\ 84\ reference\ ellipsoid.\n\n\ <p>Following\ this\ call\ {@link\ \#hasAltitude}\ will\ return\ true.\n
comment24.params=
comment24.target=void\ removeAltitude()
comment24.text=\n\ Remove\ the\ altitude\ from\ this\ location.\n\n\ <p>Following\ this\ call\ {@link\ \#hasAltitude}\ will\ return\ false,\n\ and\ {@link\ \#getAltitude}\ will\ return\ 0.0.\n
comment25.params=
comment25.target=boolean\ hasSpeed()
comment25.text=\n\ True\ if\ this\ location\ has\ a\ speed.\n
comment26.params=
comment26.target=float\ getSpeed()
comment26.text=\n\ Get\ the\ speed\ if\ it\ is\ available,\ in\ meters/second\ over\ ground.\n\n\ <p>If\ this\ location\ does\ not\ have\ a\ speed\ then\ 0.0\ is\ returned.\n
comment27.params=speed
comment27.target=void\ setSpeed(float)
comment27.text=\n\ Set\ the\ speed,\ in\ meters/second\ over\ ground.\n\n\ <p>Following\ this\ call\ {@link\ \#hasSpeed}\ will\ return\ true.\n
comment28.params=
comment28.target=void\ removeSpeed()
comment28.text=\n\ Remove\ the\ speed\ from\ this\ location.\n\n\ <p>Following\ this\ call\ {@link\ \#hasSpeed}\ will\ return\ false,\n\ and\ {@link\ \#getSpeed}\ will\ return\ 0.0.\n
comment29.params=
comment29.target=boolean\ hasBearing()
comment29.text=\n\ True\ if\ this\ location\ has\ a\ bearing.\n
comment3.params=l
comment3.target=void\ set(Location)
comment3.text=\n\ Sets\ the\ contents\ of\ the\ location\ to\ the\ values\ from\ the\ given\ location.\n
comment30.params=
comment30.target=float\ getBearing()
comment30.text=\n\ Get\ the\ bearing,\ in\ degrees.\n\n\ <p>Bearing\ is\ the\ horizontal\ direction\ of\ travel\ of\ this\ device,\n\ and\ is\ not\ related\ to\ the\ device\ orientation.\ It\ is\ guaranteed\ to\n\ be\ in\ the\ range\ (0.0,\ 360.0]\ if\ the\ device\ has\ a\ bearing.\n\n\ <p>If\ this\ location\ does\ not\ have\ a\ bearing\ then\ 0.0\ is\ returned.\n
comment31.params=bearing
comment31.target=void\ setBearing(float)
comment31.text=\n\ Set\ the\ bearing,\ in\ degrees.\n\n\ <p>Bearing\ is\ the\ horizontal\ direction\ of\ travel\ of\ this\ device,\n\ and\ is\ not\ related\ to\ the\ device\ orientation.\n\n\ <p>The\ input\ will\ be\ wrapped\ into\ the\ range\ (0.0,\ 360.0].\n
comment32.params=
comment32.target=void\ removeBearing()
comment32.text=\n\ Remove\ the\ bearing\ from\ this\ location.\n\n\ <p>Following\ this\ call\ {@link\ \#hasBearing}\ will\ return\ false,\n\ and\ {@link\ \#getBearing}\ will\ return\ 0.0.\n
comment33.params=
comment33.target=boolean\ hasAccuracy()
comment33.text=\n\ True\ if\ this\ location\ has\ an\ accuracy.\n\n\ <p>All\ locations\ generated\ by\ the\ {@link\ LocationManager}\ have\ an\n\ accuracy.\n
comment34.params=
comment34.target=float\ getAccuracy()
comment34.text=\n\ Get\ the\ estimated\ accuracy\ of\ this\ location,\ in\ meters.\n\n\ <p>We\ define\ accuracy\ as\ the\ radius\ of\ 68%\ confidence.\ In\ other\n\ words,\ if\ you\ draw\ a\ circle\ centered\ at\ this\ location's\n\ latitude\ and\ longitude,\ and\ with\ a\ radius\ equal\ to\ the\ accuracy,\n\ then\ there\ is\ a\ 68%\ probability\ that\ the\ true\ location\ is\ inside\n\ the\ circle.\n\n\ <p>In\ statistical\ terms,\ it\ is\ assumed\ that\ location\ errors\n\ are\ random\ with\ a\ normal\ distribution,\ so\ the\ 68%\ confidence\ circle\n\ represents\ one\ standard\ deviation.\ Note\ that\ in\ practice,\ location\n\ errors\ do\ not\ always\ follow\ such\ a\ simple\ distribution.\n\n\ <p>This\ accuracy\ estimation\ is\ only\ concerned\ with\ horizontal\n\ accuracy,\ and\ does\ not\ indicate\ the\ accuracy\ of\ bearing,\n\ velocity\ or\ altitude\ if\ those\ are\ included\ in\ this\ Location.\n\n\ <p>If\ this\ location\ does\ not\ have\ an\ accuracy,\ then\ 0.0\ is\ returned.\n\ All\ locations\ generated\ by\ the\ {@link\ LocationManager}\ include\n\ an\ accuracy.\n
comment35.params=accuracy
comment35.target=void\ setAccuracy(float)
comment35.text=\n\ Set\ the\ estimated\ accuracy\ of\ this\ location,\ meters.\n\n\ <p>See\ {@link\ \#getAccuracy}\ for\ the\ definition\ of\ accuracy.\n\n\ <p>Following\ this\ call\ {@link\ \#hasAccuracy}\ will\ return\ true.\n
comment36.params=
comment36.target=void\ removeAccuracy()
comment36.text=\n\ Remove\ the\ accuracy\ from\ this\ location.\n\n\ <p>Following\ this\ call\ {@link\ \#hasAccuracy}\ will\ return\ false,\ and\n\ {@link\ \#getAccuracy}\ will\ return\ 0.0.\n
comment37.params=
comment37.target=java.lang.String\ toString()
comment4.params=
comment4.target=void\ reset()
comment4.text=\n\ Clears\ the\ contents\ of\ the\ location.\n
comment5.params=coordinate\ outputType
comment5.target=java.lang.String\ convert(double,\ int)
comment5.text=\n\ Converts\ a\ coordinate\ to\ a\ String\ representation.\ The\ outputType\n\ may\ be\ one\ of\ FORMAT_DEGREES,\ FORMAT_MINUTES,\ or\ FORMAT_SECONDS.\n\ The\ coordinate\ must\ be\ a\ valid\ double\ between\ -180.0\ and\ 180.0.\n\n\ @throws\ IllegalArgumentException\ if\ coordinate\ is\ less\ than\n\ -180.0,\ greater\ than\ 180.0,\ or\ is\ not\ a\ number.\n\ @throws\ IllegalArgumentException\ if\ outputType\ is\ not\ one\ of\n\ FORMAT_DEGREES,\ FORMAT_MINUTES,\ or\ FORMAT_SECONDS.\n
comment6.params=coordinate
comment6.target=double\ convert(java.lang.String)
comment6.text=\n\ Converts\ a\ String\ in\ one\ of\ the\ formats\ described\ by\n\ FORMAT_DEGREES,\ FORMAT_MINUTES,\ or\ FORMAT_SECONDS\ into\ a\n\ double.\n\n\ @throws\ NullPointerException\ if\ coordinate\ is\ null\n\ @throws\ IllegalArgumentException\ if\ the\ coordinate\ is\ not\n\ in\ one\ of\ the\ valid\ formats.\n
comment7.params=lat1\ lon1\ lat2\ lon2\ results
comment7.target=void\ computeDistanceAndBearing(double,\ double,\ double,\ double,\ float[])
comment8.params=startLatitude\ startLongitude\ endLatitude\ endLongitude\ results
comment8.target=void\ distanceBetween(double,\ double,\ double,\ double,\ float[])
comment8.text=\n\ Computes\ the\ approximate\ distance\ in\ meters\ between\ two\n\ locations,\ and\ optionally\ the\ initial\ and\ final\ bearings\ of\ the\n\ shortest\ path\ between\ them.\ \ Distance\ and\ bearing\ are\ defined\ using\ the\n\ WGS84\ ellipsoid.\n\n\ <p>\ The\ computed\ distance\ is\ stored\ in\ results[0].\ \ If\ results\ has\ length\n\ 2\ or\ greater,\ the\ initial\ bearing\ is\ stored\ in\ results[1].\ If\ results\ has\n\ length\ 3\ or\ greater,\ the\ final\ bearing\ is\ stored\ in\ results[2].\n\n\ @param\ startLatitude\ the\ starting\ latitude\n\ @param\ startLongitude\ the\ starting\ longitude\n\ @param\ endLatitude\ the\ ending\ latitude\n\ @param\ endLongitude\ the\ ending\ longitude\n\ @param\ results\ an\ array\ of\ floats\ to\ hold\ the\ results\n\n\ @throws\ IllegalArgumentException\ if\ results\ is\ null\ or\ has\ length\ <\ 1\n
comment9.params=dest
comment9.target=float\ distanceTo(Location)
comment9.text=\n\ Returns\ the\ approximate\ distance\ in\ meters\ between\ this\n\ location\ and\ the\ given\ location.\ \ Distance\ is\ defined\ using\n\ the\ WGS84\ ellipsoid.\n\n\ @param\ dest\ the\ destination\ location\n\ @return\ the\ approximate\ distance\ in\ meters\n
numComments=38
